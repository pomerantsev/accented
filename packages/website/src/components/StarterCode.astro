---
import { Code } from 'astro:components';
import { theme, options, getCodeSnippet } from './starterCodeUtils';
---
<starter-code>
  <form>
    <fieldset disabled>
      <legend>Bundler / framework</legend>
      {options.bundlers.map(bundler => (
        <label>
          <input
            type="radio"
            name="bundler"
            value={bundler.value}
            checked={bundler.checked}
          />
          {bundler.name}
        </label>
      ))}
    </fieldset>
    <fieldset disabled>
      <legend>Import</legend>
      {options.imports.map(importItem => (
        <label>
          <input
            type="radio"
            name="import"
            value={importItem.value}
            checked={importItem.checked}
          />
          {importItem.name}
        </label>
      ))}
    </fieldset>
    <fieldset disabled>
      <legend>Source</legend>
      {options.sources.map(source => (
        <label>
          <input
            type="radio"
            name="source"
            value={source.value}
            checked={source.checked}
          />
          {source.name}
        </label>
      ))}
    </fieldset>
    <!-- TODO: make sure the change in the output is communicated to a screen reader. -->
    <div class="container">
      <Code
        code={getCodeSnippet(
          options.bundlers.find(b => b.checked),
          options.imports.find(i => i.checked)?.value,
          options.sources.find(s => s.checked)
        )}
        lang="js"
        theme={theme}
        wrap
      />
    </div>
  </form>
</starter-code>
<script>
  import { createHighlighter } from 'shiki';
  import { theme, options, getCodeSnippet } from './starterCodeUtils';

  const highlighter = await createHighlighter({
    langs: ['js'],
    themes: [theme],
  });

  customElements.define('starter-code', class extends HTMLElement {

    form: HTMLFormElement | null = null;

    connectedCallback() {
      this.form = this.querySelector('form');
      if (this.form) {
        const fieldsets = this.form.querySelectorAll('fieldset');
        for (const fieldset of fieldsets) {
          fieldset.disabled = false;

          fieldset.addEventListener('change', () => {
            this.updateCodeSnippet();
          });
        }
      }
    }

    async updateCodeSnippet() {
      const codeSnippetContainer = this.querySelector('.container');
      if (codeSnippetContainer && this.form) {
        const bundlerRadio: HTMLInputElement | null = this.form.querySelector('input[name="bundler"]:checked');
        const bundler = options.bundlers.find(bundler => bundler.value === bundlerRadio?.value);

        const importRadio: HTMLInputElement | null = this.form.querySelector('input[name="import"]:checked');
        const importType = options.imports.find(importItem => importItem.value === importRadio?.value)?.value;

        const sourceRadio: HTMLInputElement | null = this.form.querySelector('input[name="source"]:checked');
        const source = options.sources.find(source => source.value === sourceRadio?.value);

        codeSnippetContainer.innerHTML = highlighter.codeToHtml(getCodeSnippet(bundler, importType, source), {
          lang: 'js',
          theme,
        });

        const codeSnippetPre = codeSnippetContainer.querySelector('pre');
        if (codeSnippetPre) {
          codeSnippetPre.style.overflowX = 'auto';
          codeSnippetPre.style.whiteSpace = 'pre-wrap';
          codeSnippetPre.style.wordWrap = 'break-word';
        }
      }
    }
  });
</script>
